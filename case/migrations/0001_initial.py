# Generated by Django 2.0.3 on 2018-12-23 01:44

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('utils', '0001_initial'),
        ('evidence', '0001_initial'),
        ('task', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('event', '0001_initial'),
        ('entity', '0001_initial'),
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(help_text='Enter a title for the Case', max_length=350, verbose_name='Title')),
                ('reference', models.CharField(blank=True, help_text='Enter a reference code for the Case', max_length=45, null=True, verbose_name='Reference')),
                ('description', models.TextField(blank=True, help_text='Enter a description for the Case', null=True, verbose_name='Case Description')),
                ('background', models.TextField(blank=True, help_text='Enter a background for the Case', null=True, verbose_name='Case Background')),
                ('purpose', models.CharField(blank=True, help_text='Enter a purpose for the Case', max_length=2500, null=True, verbose_name='Case Purpose')),
                ('image_upload', models.FileField(blank=True, help_text='Upload an image for the Case', null=True, upload_to='uploads/', verbose_name='Image')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, unique=True, verbose_name='Slug')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='Select assigned by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='case_assigned_by', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('assigned_to', models.ManyToManyField(help_text='Select assigned to', related_name='case_assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('authorisation', models.ForeignKey(blank=True, help_text='Select a case authorisation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_authorisation', to='utils.Authorisation', verbose_name='Case Authorisation')),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='CaseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Case Category',
                'verbose_name_plural': 'Case Categories',
            },
        ),
        migrations.CreateModel(
            name='CaseClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Case Classification',
                'verbose_name_plural': 'Case Classifications',
            },
        ),
        migrations.CreateModel(
            name='CaseCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('role', models.CharField(blank=True, help_text='(Optional) Role of Entity', max_length=500, null=True, verbose_name='Role')),
                ('type', models.CharField(choices=[('ACQ', 'Acquaintance'), ('AST', 'Assisting'), ('CLI', 'Client'), ('DEF', 'Defendant'), ('INF', 'Informant'), ('PLA', 'Plaintiff'), ('RLT', 'Related'), ('SUS', 'Suspect'), ('UNR', 'Unrelated'), ('UNK', 'Unknown'), ('VIC', 'Victim'), ('WIT', 'Witness')], help_text='(Optional) Type of Entity', max_length=3, verbose_name='Type')),
                ('case', models.ForeignKey(help_text='(Optional) Select Case', on_delete=django.db.models.deletion.DO_NOTHING, related_name='case_company_case', to='case.Case', verbose_name='Case')),
                ('company', models.ForeignKey(help_text='Select Company', on_delete=django.db.models.deletion.DO_NOTHING, related_name='case_company_company', to='entity.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Case Company',
                'verbose_name_plural': 'Case Companies',
            },
        ),
        migrations.CreateModel(
            name='CaseEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Task', max_length=128, verbose_name='Title')),
                ('image_upload', models.FileField(blank=True, help_text='Upload an image for the Task', null=True, upload_to='', verbose_name='Event Image')),
                ('date', models.DateTimeField(default=datetime.datetime(2018, 12, 23, 1, 44, 55, 672275, tzinfo=utc), help_text='Select a date for the Task', verbose_name='Date')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, unique=True, verbose_name='Slug')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='(Optional) Select Event assigned by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Event_assigned_by', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('assigned_to', models.ManyToManyField(blank=True, help_text='(Optional) Select Event assigned to', related_name='Event_assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('authorisation', models.ForeignKey(blank=True, help_text='(Optional) Select the authorisation of the Event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Authorisation', verbose_name='Authorisation')),
                ('case', models.ForeignKey(help_text='Select a Case', on_delete=django.db.models.deletion.CASCADE, related_name='case_event_case', to='case.Case', verbose_name='Case')),
                ('category', models.ForeignKey(blank=True, help_text='(Optional) Select the category of Event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='event.EventCategory', verbose_name='Event Category')),
                ('company', models.ManyToManyField(help_text='Select Companies', related_name='case_event_company', to='entity.Company', verbose_name='Companies Involved')),
            ],
            options={
                'verbose_name': 'Case Event',
                'verbose_name_plural': 'Case Event',
            },
        ),
        migrations.CreateModel(
            name='CaseEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Evidence', max_length=128, verbose_name='Title')),
                ('reference', models.CharField(blank=True, default=None, help_text='Enter a reference code for the Evidence', max_length=45, null=True, verbose_name='Reference')),
                ('bag_number', models.CharField(blank=True, default=None, help_text='Enter a bag number for the Evidence', max_length=50, null=True, verbose_name='Bag Number')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter a current location for the Evidence', max_length=250, null=True, verbose_name='Location')),
                ('file_location', models.FileField(blank=True, help_text='Upload a file location for the Evidence', null=True, upload_to='', verbose_name='File Location')),
                ('image_upload', models.FileField(blank=True, help_text='Upload an image for the Evidence', null=True, upload_to='', verbose_name='Image')),
                ('qr_code', models.CharField(blank=True, default=None, help_text='Enter a QR code for the evidence', max_length=128, null=True, verbose_name='QR Code')),
                ('retention_reminder_sent', models.BooleanField(default=False, help_text='Has a rentention reminder been sent', verbose_name='Retention Reminder')),
                ('retention_start_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Enter the retention start date', null=True, verbose_name='Retention Start Date')),
                ('retention_end_date', models.DateTimeField(blank=True, help_text='Enter the retention end date', null=True, verbose_name='Retention End Date')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, unique=True, verbose_name='Slug')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='(Optional) Select Evidence assigned by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evidence_assigned_by', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('assigned_to', models.ManyToManyField(blank=True, help_text='(Optional) Select Evidence assigned to', related_name='evidence_assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('authorisation', models.ForeignKey(blank=True, help_text='(Optional) Select the authorisation of the Evidence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Authorisation', verbose_name='Authorisation')),
                ('case', models.ForeignKey(help_text='Select Case', on_delete=django.db.models.deletion.DO_NOTHING, to='case.Case', verbose_name='Case')),
                ('category', models.ForeignKey(blank=True, help_text='(Optional) Select the category of Evidence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='evidence.EvidenceCategory', verbose_name='Evidence Category')),
                ('chain_of_custody', models.ManyToManyField(blank=True, help_text='(Optional) Enter the chain of custody', to='evidence.ChainOfCustody', verbose_name='Chain Of Custody')),
                ('custodian', models.ForeignKey(blank=True, help_text='(Optional) Select the Evidence Custodian', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evidence_custodian', to=settings.AUTH_USER_MODEL, verbose_name='Evidence Custodian')),
                ('note', models.ManyToManyField(blank=True, help_text='(Optional) Enter a note relating to the Evidence', related_name='evidence_note', to='utils.Note', verbose_name='Note')),
                ('priority', models.ForeignKey(blank=True, help_text='(Optional) Select the priority of the Evidence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Priority', verbose_name='Priority')),
                ('status', models.ForeignKey(blank=True, help_text='(Optional) Select the status of the Evidence', null=True, on_delete=django.db.models.deletion.SET_NULL, to='evidence.EvidenceStatus', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Case Evidence',
                'verbose_name_plural': 'Case Evidence',
            },
        ),
        migrations.CreateModel(
            name='CaseInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('active', models.BooleanField(default=True, help_text='Is the case device Active', verbose_name='Active')),
                ('case', models.ForeignKey(help_text='Select a Case', on_delete=django.db.models.deletion.CASCADE, related_name='case_inventory_case', to='case.Case', verbose_name='Case')),
                ('device', models.ForeignKey(help_text='Select a Device', on_delete=django.db.models.deletion.DO_NOTHING, related_name='case_inventory_device', to='inventory.Device', verbose_name='Device')),
                ('note', models.ManyToManyField(help_text='Enter a case inventory Note', related_name='case_inventory_note', to='utils.Note', verbose_name='Case Inventory Note')),
            ],
            options={
                'verbose_name': 'Case Device',
                'verbose_name_plural': 'Case Devices',
            },
        ),
        migrations.CreateModel(
            name='CasePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('role', models.CharField(blank=True, help_text='(Optional) Role of Entity', max_length=500, null=True, verbose_name='Role')),
                ('type', models.CharField(choices=[('ACQ', 'Acquaintance'), ('AST', 'Assisting'), ('CLI', 'Client'), ('DEF', 'Defendant'), ('INF', 'Informant'), ('PLA', 'Plaintiff'), ('RLT', 'Related'), ('SUS', 'Suspect'), ('UNR', 'Unrelated'), ('UNK', 'Unknown'), ('VIC', 'Victim'), ('WIT', 'Witness')], help_text='(Optional) Type of Entity', max_length=3, verbose_name='Type')),
                ('case', models.ForeignKey(help_text='Select Case', on_delete=django.db.models.deletion.DO_NOTHING, related_name='case_person_case', to='case.Case', verbose_name='Case')),
                ('person', models.ForeignKey(help_text='Select Person', on_delete=django.db.models.deletion.DO_NOTHING, related_name='case_person_person', to='entity.Person', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'Case Person',
                'verbose_name_plural': 'Case Persons',
            },
        ),
        migrations.CreateModel(
            name='CaseStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Case Status',
                'verbose_name_plural': 'Case Status',
            },
        ),
        migrations.CreateModel(
            name='CaseStatusGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('status', models.ManyToManyField(blank=True, help_text='Select Case Status', to='case.CaseStatus', verbose_name='Case Status')),
            ],
            options={
                'verbose_name': 'Case Status Group',
                'verbose_name_plural': 'Case Status Groups',
            },
        ),
        migrations.CreateModel(
            name='CaseTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(help_text='Enter a title for the Task', max_length=128, verbose_name='Title')),
                ('location', models.CharField(blank=True, default=None, help_text='(Optional) Enter a location for the task', max_length=250, null=True, verbose_name='Location')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, unique=True, verbose_name='Slug')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='(Optional) Select Task assigned by', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_assigned_by', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('assigned_to', models.ManyToManyField(blank=True, help_text='(Optional) Select Task assigned to', related_name='task_assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('authorisation', models.ForeignKey(blank=True, help_text='(Optional) Select the authorisation of the Task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Authorisation', verbose_name='Authorisation')),
                ('case', models.ForeignKey(help_text='Select a Case', on_delete=django.db.models.deletion.CASCADE, related_name='case_task_case', to='case.Case', verbose_name='Case')),
                ('category', models.ForeignKey(blank=True, help_text='(Optional) Select the category of Task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='task.TaskCategory', verbose_name='Category')),
                ('company', models.ManyToManyField(help_text='Select Companies', related_name='case_task_company', to='entity.Company', verbose_name='Companies Involved')),
                ('device', models.ManyToManyField(help_text='Select Evidence', related_name='case_task_device', to='case.CaseInventory', verbose_name='Devices Involved')),
                ('event', models.ManyToManyField(help_text='Select Events', related_name='case_task_event', to='case.CaseEvent', verbose_name='Events Involved')),
                ('evidence', models.ManyToManyField(help_text='Select Evidence', related_name='case_task_evidence', to='case.CaseEvidence', verbose_name='Evidence Involved')),
                ('manager', models.ForeignKey(blank=True, help_text='(Optional) Select the Task Manager', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_manager', to=settings.AUTH_USER_MODEL, verbose_name='Task Manager')),
                ('note', models.ManyToManyField(blank=True, help_text='(Optional) Enter a note relating to the Task', related_name='task_note', to='utils.Note', verbose_name='Note')),
                ('person', models.ManyToManyField(help_text='Select Persons', related_name='case_task_person', to='entity.Person', verbose_name='Persons Involved')),
                ('priority', models.ForeignKey(blank=True, help_text='(Optional) Select the priority of the Task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Priority', verbose_name='Priority')),
                ('status', models.ForeignKey(blank=True, help_text='(Optional) Select the status of the Task', null=True, on_delete=django.db.models.deletion.SET_NULL, to='task.TaskStatus', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Case Task',
                'verbose_name_plural': 'Case Task',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCase',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(help_text='Enter a title for the Case', max_length=350, verbose_name='Title')),
                ('reference', models.CharField(blank=True, help_text='Enter a reference code for the Case', max_length=45, null=True, verbose_name='Reference')),
                ('description', models.TextField(blank=True, help_text='Enter a description for the Case', null=True, verbose_name='Case Description')),
                ('background', models.TextField(blank=True, help_text='Enter a background for the Case', null=True, verbose_name='Case Background')),
                ('purpose', models.CharField(blank=True, help_text='Enter a purpose for the Case', max_length=2500, null=True, verbose_name='Case Purpose')),
                ('image_upload', models.TextField(blank=True, help_text='Upload an image for the Case', max_length=100, null=True, verbose_name='Image')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, verbose_name='Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.CaseCategory')),
                ('classification', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.CaseClassification')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('priority', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Priority')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.CaseStatus')),
            ],
            options={
                'verbose_name': 'historical Case',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseClassification',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Classification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseCompany',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('role', models.CharField(blank=True, help_text='(Optional) Role of Entity', max_length=500, null=True, verbose_name='Role')),
                ('type', models.CharField(choices=[('ACQ', 'Acquaintance'), ('AST', 'Assisting'), ('CLI', 'Client'), ('DEF', 'Defendant'), ('INF', 'Informant'), ('PLA', 'Plaintiff'), ('RLT', 'Related'), ('SUS', 'Suspect'), ('UNR', 'Unrelated'), ('UNK', 'Unknown'), ('VIC', 'Victim'), ('WIT', 'Witness')], help_text='(Optional) Type of Entity', max_length=3, verbose_name='Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Company',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseEvent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Task', max_length=128, verbose_name='Title')),
                ('image_upload', models.TextField(blank=True, help_text='Upload an image for the Task', max_length=100, null=True, verbose_name='Event Image')),
                ('date', models.DateTimeField(default=datetime.datetime(2018, 12, 23, 1, 44, 55, 672275, tzinfo=utc), help_text='Select a date for the Task', verbose_name='Date')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, verbose_name='Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='event.EventCategory')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('priority', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Priority')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='event.EventStatus')),
            ],
            options={
                'verbose_name': 'historical Case Event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseEvidence',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Evidence', max_length=128, verbose_name='Title')),
                ('reference', models.CharField(blank=True, default=None, help_text='Enter a reference code for the Evidence', max_length=45, null=True, verbose_name='Reference')),
                ('bag_number', models.CharField(blank=True, default=None, help_text='Enter a bag number for the Evidence', max_length=50, null=True, verbose_name='Bag Number')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter a current location for the Evidence', max_length=250, null=True, verbose_name='Location')),
                ('file_location', models.TextField(blank=True, help_text='Upload a file location for the Evidence', max_length=100, null=True, verbose_name='File Location')),
                ('image_upload', models.TextField(blank=True, help_text='Upload an image for the Evidence', max_length=100, null=True, verbose_name='Image')),
                ('qr_code', models.CharField(blank=True, default=None, help_text='Enter a QR code for the evidence', max_length=128, null=True, verbose_name='QR Code')),
                ('retention_reminder_sent', models.BooleanField(default=False, help_text='Has a rentention reminder been sent', verbose_name='Retention Reminder')),
                ('retention_start_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Enter the retention start date', null=True, verbose_name='Retention Start Date')),
                ('retention_end_date', models.DateTimeField(blank=True, help_text='Enter the retention end date', null=True, verbose_name='Retention End Date')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, verbose_name='Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='evidence.EvidenceCategory')),
                ('custodian', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('priority', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Priority')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='evidence.EvidenceStatus')),
            ],
            options={
                'verbose_name': 'historical Case Evidence',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseInventory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('active', models.BooleanField(default=True, help_text='Is the case device Active', verbose_name='Active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('device', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.Device')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCasePerson',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('role', models.CharField(blank=True, help_text='(Optional) Role of Entity', max_length=500, null=True, verbose_name='Role')),
                ('type', models.CharField(choices=[('ACQ', 'Acquaintance'), ('AST', 'Assisting'), ('CLI', 'Client'), ('DEF', 'Defendant'), ('INF', 'Informant'), ('PLA', 'Plaintiff'), ('RLT', 'Related'), ('SUS', 'Suspect'), ('UNR', 'Unrelated'), ('UNK', 'Unknown'), ('VIC', 'Victim'), ('WIT', 'Witness')], help_text='(Optional) Type of Entity', max_length=3, verbose_name='Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Person')),
            ],
            options={
                'verbose_name': 'historical Case Person',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseStatus',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Status',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseStatusGroup',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Case Status Group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCaseTask',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(help_text='Enter a title for the Task', max_length=128, verbose_name='Title')),
                ('location', models.CharField(blank=True, default=None, help_text='(Optional) Enter a location for the task', max_length=250, null=True, verbose_name='Location')),
                ('slug', models.SlugField(blank=True, help_text='A slug value representing title', null=True, verbose_name='Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='case.Case')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='task.TaskCategory')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('priority', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Priority')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='task.TaskStatus')),
            ],
            options={
                'verbose_name': 'historical Case Task',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.AddField(
            model_name='caseevent',
            name='evidence',
            field=models.ManyToManyField(help_text='Select Evidence', related_name='case_event_evidence', to='case.CaseEvidence', verbose_name='Evidence Involved'),
        ),
        migrations.AddField(
            model_name='caseevent',
            name='manager',
            field=models.ForeignKey(blank=True, help_text='(Optional) Select the Event Manager', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Event_manager', to=settings.AUTH_USER_MODEL, verbose_name='Event Manager'),
        ),
        migrations.AddField(
            model_name='caseevent',
            name='note',
            field=models.ManyToManyField(blank=True, help_text='(Optional) Enter a note relating to the Event', related_name='event_note', to='utils.Note', verbose_name='Note'),
        ),
        migrations.AddField(
            model_name='caseevent',
            name='person',
            field=models.ManyToManyField(help_text='Select Persons', related_name='case_event_person', to='entity.Person', verbose_name='Persons'),
        ),
        migrations.AddField(
            model_name='caseevent',
            name='priority',
            field=models.ForeignKey(blank=True, help_text='(Optional) Select the priority of the Event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='utils.Priority', verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='caseevent',
            name='status',
            field=models.ForeignKey(blank=True, help_text='(Optional) Select the status of the Event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='event.EventStatus', verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='case',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Select a case category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_category', to='case.CaseCategory', verbose_name='Case Category'),
        ),
        migrations.AddField(
            model_name='case',
            name='classification',
            field=models.ForeignKey(blank=True, help_text='Select a case classification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_classification', to='case.CaseClassification', verbose_name='Case Classification'),
        ),
        migrations.AddField(
            model_name='case',
            name='manager',
            field=models.ForeignKey(blank=True, help_text='Select a case manager', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='case_manager', to=settings.AUTH_USER_MODEL, verbose_name='Case Manager'),
        ),
        migrations.AddField(
            model_name='case',
            name='priority',
            field=models.ForeignKey(blank=True, help_text='Select a case priority', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_priority', to='utils.Priority', verbose_name='Case Priority'),
        ),
        migrations.AddField(
            model_name='case',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Select a case status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='case_status', to='case.CaseStatus', verbose_name='Case Status'),
        ),
    ]
