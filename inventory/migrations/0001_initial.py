# Generated by Django 2.0.3 on 2018-12-23 01:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('utils', '0001_initial'),
        ('entity', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(blank=True, help_text='Enter a title for the Device', max_length=128, null=True, verbose_name='Title')),
                ('model', models.CharField(blank=True, help_text='Enter a model for the Device', max_length=128, null=True, verbose_name='Device Model')),
                ('manufacturer', models.CharField(blank=True, help_text='Enter the Manufacturer', max_length=128, null=True, verbose_name='Device Manufacturer')),
                ('variation', models.CharField(blank=True, help_text='Enter a varitaion of the Device', max_length=128, null=True, verbose_name='Device Variation')),
                ('serial_number', models.CharField(blank=True, help_text='Enter the serial number of the Device', max_length=128, null=True, verbose_name='Serial Number')),
                ('status', models.CharField(choices=[('CR', 'Checked In - Ready'), ('CN', 'Checked In - Not Ready'), ('CO', 'Checked Out'), ('DM', 'Damaged'), ('DE', 'Decommisioned'), ('HOL', 'On Hold'), ('LP', 'Awaiting Loan Approval'), ('MI', 'Missing'), ('OB', 'Obselete'), ('RE', 'Replacement Required'), ('RP', 'Awaiting Return Approval'), ('RS', 'Restricted Use'), ('SE', 'Servicing'), ('ST', 'In Storage')], help_text='Select the status of the Device', max_length=2, verbose_name='Device Status')),
                ('condition', models.CharField(choices=[('AV', 'Average'), ('BA', 'Below Average'), ('DM', 'Damaged'), ('EX', 'Excellent'), ('GD', 'Good'), ('LO', 'Lost'), ('MI', 'Missing'), ('NW', 'New'), ('PO', 'Poor')], help_text='Select the condition of the Device', max_length=2, verbose_name='Device Condition')),
                ('returnable', models.BooleanField(default=True, help_text='Is the Device returnable To stock', verbose_name='Returnable To Stock')),
                ('internal_id', models.CharField(blank=True, help_text='Enter the internal id of the Device', max_length=45, null=True, verbose_name='Internal ID')),
                ('model_number', models.CharField(blank=True, help_text='Enter the model number of the Device', max_length=45, null=True, verbose_name='Model Number')),
                ('purchased', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the date the Device was purchased', null=True, verbose_name='Purchase Date')),
                ('warranty_title', models.CharField(blank=True, help_text='Enter the internal id of the Warranty', max_length=128, null=True, verbose_name='Warranty Title')),
                ('warranty_duration', models.CharField(blank=True, help_text='Enter the duration of the Warranty', max_length=16, null=True, verbose_name='Warranty Duration')),
                ('warranty_id', models.CharField(blank=True, help_text='Enter the reference id of the Warranty', max_length=45, null=True, verbose_name='Warranty Reference ID')),
                ('warranty_terms', models.TextField(blank=True, help_text='Enter the terms and conditions of the Warranty', null=True, verbose_name='Warranty Terms and Conditions')),
                ('warranty_start', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the start date of the Warranty', null=True, verbose_name='Warranty Start Date')),
                ('warranty_end', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the end date of the Warranty', null=True, verbose_name='Warranty End Date')),
                ('warranty_extended', models.BooleanField(default=False, help_text='Has the Warranty been extended', verbose_name='Extended Warranty')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the Device slug', null=True, verbose_name='Device Slug')),
                ('authorisation', models.ForeignKey(blank=True, help_text='Select the Device Autorisation Level', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_authorisation', to='utils.Authorisation', verbose_name='Device Authorisation')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Device Category',
                'verbose_name_plural': 'Device Categories',
            },
        ),
        migrations.CreateModel(
            name='DeviceSubcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('category', models.ForeignKey(blank=True, help_text='Device Category', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='category', to='inventory.DeviceCategory', verbose_name='Device Category')),
            ],
            options={
                'verbose_name': 'Device Subcategory',
                'verbose_name_plural': 'Device Subcategories',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDevice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(blank=True, help_text='Enter a title for the Device', max_length=128, null=True, verbose_name='Title')),
                ('model', models.CharField(blank=True, help_text='Enter a model for the Device', max_length=128, null=True, verbose_name='Device Model')),
                ('manufacturer', models.CharField(blank=True, help_text='Enter the Manufacturer', max_length=128, null=True, verbose_name='Device Manufacturer')),
                ('variation', models.CharField(blank=True, help_text='Enter a varitaion of the Device', max_length=128, null=True, verbose_name='Device Variation')),
                ('serial_number', models.CharField(blank=True, help_text='Enter the serial number of the Device', max_length=128, null=True, verbose_name='Serial Number')),
                ('status', models.CharField(choices=[('CR', 'Checked In - Ready'), ('CN', 'Checked In - Not Ready'), ('CO', 'Checked Out'), ('DM', 'Damaged'), ('DE', 'Decommisioned'), ('HOL', 'On Hold'), ('LP', 'Awaiting Loan Approval'), ('MI', 'Missing'), ('OB', 'Obselete'), ('RE', 'Replacement Required'), ('RP', 'Awaiting Return Approval'), ('RS', 'Restricted Use'), ('SE', 'Servicing'), ('ST', 'In Storage')], help_text='Select the status of the Device', max_length=2, verbose_name='Device Status')),
                ('condition', models.CharField(choices=[('AV', 'Average'), ('BA', 'Below Average'), ('DM', 'Damaged'), ('EX', 'Excellent'), ('GD', 'Good'), ('LO', 'Lost'), ('MI', 'Missing'), ('NW', 'New'), ('PO', 'Poor')], help_text='Select the condition of the Device', max_length=2, verbose_name='Device Condition')),
                ('returnable', models.BooleanField(default=True, help_text='Is the Device returnable To stock', verbose_name='Returnable To Stock')),
                ('internal_id', models.CharField(blank=True, help_text='Enter the internal id of the Device', max_length=45, null=True, verbose_name='Internal ID')),
                ('model_number', models.CharField(blank=True, help_text='Enter the model number of the Device', max_length=45, null=True, verbose_name='Model Number')),
                ('purchased', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the date the Device was purchased', null=True, verbose_name='Purchase Date')),
                ('warranty_title', models.CharField(blank=True, help_text='Enter the internal id of the Warranty', max_length=128, null=True, verbose_name='Warranty Title')),
                ('warranty_duration', models.CharField(blank=True, help_text='Enter the duration of the Warranty', max_length=16, null=True, verbose_name='Warranty Duration')),
                ('warranty_id', models.CharField(blank=True, help_text='Enter the reference id of the Warranty', max_length=45, null=True, verbose_name='Warranty Reference ID')),
                ('warranty_terms', models.TextField(blank=True, help_text='Enter the terms and conditions of the Warranty', null=True, verbose_name='Warranty Terms and Conditions')),
                ('warranty_start', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the start date of the Warranty', null=True, verbose_name='Warranty Start Date')),
                ('warranty_end', models.DateField(blank=True, default=django.utils.timezone.now, help_text='Enter the end date of the Warranty', null=True, verbose_name='Warranty End Date')),
                ('warranty_extended', models.BooleanField(default=False, help_text='Has the Warranty been extended', verbose_name='Extended Warranty')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the Device slug', null=True, verbose_name='Device Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.DeviceCategory')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sales_rep', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Person')),
            ],
            options={
                'verbose_name': 'historical Device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeviceCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Device Category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeviceSubcategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.DeviceCategory')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Device Subcategory',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalService',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('issue', models.TextField(blank=True, help_text='Enter the issue', null=True, verbose_name='Issue')),
                ('resolution', models.TextField(blank=True, help_text='Enter the resolution', null=True, verbose_name='Resolution')),
                ('status', models.CharField(choices=[('AW', 'Awaiting Service'), ('SE', 'Being Serviced'), ('AR', 'Awaiting Return'), ('RF', 'Returned From Service'), ('RT', 'Returned To Stock'), ('ST', 'In Storage'), ('RE', 'Replacement Required'), ('MI', 'Missing'), ('DE', 'Decommisioned'), ('OB', 'Obselete'), ('HOL', 'On Hold')], help_text='Select the sservice status', max_length=2, verbose_name='Service Status')),
                ('technician', models.CharField(blank=True, help_text="Enter the service techncician's name", max_length=64, null=True, verbose_name='Repair Technician')),
                ('leave_date', models.DateField(blank=True, help_text='Enter the date left for service', null=True, verbose_name='Date Left Inventory')),
                ('return_date', models.DateField(blank=True, help_text='Enter the return date to inventory', null=True, verbose_name='Date Returned to Inventory')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the service cost', max_digits=12, null=True, verbose_name='Service Cost')),
                ('returned', models.BooleanField(default=False, help_text='Device returned', verbose_name='Returned to Inventory')),
                ('under_warranty', models.BooleanField(default=True, help_text='Device under warranty', verbose_name='Under Warranty')),
                ('tested', models.BooleanField(default=True, help_text='Device tested upon return', verbose_name='Tested By')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Service History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalServiceContract',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Service Contract', max_length=128, verbose_name='Title')),
                ('internal_id', models.CharField(blank=True, help_text='Enter the internal id for the Service Contract', max_length=45, null=True, verbose_name='Internal ID')),
                ('service_id', models.CharField(blank=True, help_text='Enter a contract id for the Service Contract', max_length=45, null=True, verbose_name='Service ID')),
                ('terms', models.TextField(blank=True, help_text='Enter the terms for the Service Contract', null=True, verbose_name='Terms and Conditions')),
                ('contract_start', models.DateField(blank=True, help_text='Enter a duration for the Service Contract', null=True, verbose_name='Contract Duration')),
                ('contract_end', models.DateField(blank=True, help_text='Enter a renewal date for the Service Contract', null=True, verbose_name='Renewal Date')),
                ('renewal_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the renewal cost for the Service Contract', max_digits=12, null=True, verbose_name='Renewal Cost')),
                ('active', models.BooleanField(default=False, help_text='(Optional) Is Contract Active', verbose_name='Active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Person')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('responsible', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company')),
            ],
            options={
                'verbose_name': 'historical Service Contract',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('issue', models.TextField(blank=True, help_text='Enter the issue', null=True, verbose_name='Issue')),
                ('resolution', models.TextField(blank=True, help_text='Enter the resolution', null=True, verbose_name='Resolution')),
                ('status', models.CharField(choices=[('AW', 'Awaiting Service'), ('SE', 'Being Serviced'), ('AR', 'Awaiting Return'), ('RF', 'Returned From Service'), ('RT', 'Returned To Stock'), ('ST', 'In Storage'), ('RE', 'Replacement Required'), ('MI', 'Missing'), ('DE', 'Decommisioned'), ('OB', 'Obselete'), ('HOL', 'On Hold')], help_text='Select the sservice status', max_length=2, verbose_name='Service Status')),
                ('technician', models.CharField(blank=True, help_text="Enter the service techncician's name", max_length=64, null=True, verbose_name='Repair Technician')),
                ('leave_date', models.DateField(blank=True, help_text='Enter the date left for service', null=True, verbose_name='Date Left Inventory')),
                ('return_date', models.DateField(blank=True, help_text='Enter the return date to inventory', null=True, verbose_name='Date Returned to Inventory')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the service cost', max_digits=12, null=True, verbose_name='Service Cost')),
                ('returned', models.BooleanField(default=False, help_text='Device returned', verbose_name='Returned to Inventory')),
                ('under_warranty', models.BooleanField(default=True, help_text='Device under warranty', verbose_name='Under Warranty')),
                ('tested', models.BooleanField(default=True, help_text='Device tested upon return', verbose_name='Tested By')),
                ('manager', models.ForeignKey(blank=True, help_text='Select the Service manager', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_manager', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
            ],
            options={
                'verbose_name': 'Service History',
                'verbose_name_plural': 'Service History',
            },
        ),
        migrations.CreateModel(
            name='ServiceContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(default=None, help_text='Enter a title for the Service Contract', max_length=128, verbose_name='Title')),
                ('internal_id', models.CharField(blank=True, help_text='Enter the internal id for the Service Contract', max_length=45, null=True, verbose_name='Internal ID')),
                ('service_id', models.CharField(blank=True, help_text='Enter a contract id for the Service Contract', max_length=45, null=True, verbose_name='Service ID')),
                ('terms', models.TextField(blank=True, help_text='Enter the terms for the Service Contract', null=True, verbose_name='Terms and Conditions')),
                ('contract_start', models.DateField(blank=True, help_text='Enter a duration for the Service Contract', null=True, verbose_name='Contract Duration')),
                ('contract_end', models.DateField(blank=True, help_text='Enter a renewal date for the Service Contract', null=True, verbose_name='Renewal Date')),
                ('renewal_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the renewal cost for the Service Contract', max_digits=12, null=True, verbose_name='Renewal Cost')),
                ('active', models.BooleanField(default=False, help_text='(Optional) Is Contract Active', verbose_name='Active')),
                ('contact', models.ForeignKey(blank=True, help_text='Enter the contact for the Service Contract', on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_contract_contact', to='entity.Person', verbose_name='Contract Contact')),
                ('responsible', models.ForeignKey(blank=True, help_text='Enter the resposnsible party for the Service Contract', on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_sontract_responsible', to=settings.AUTH_USER_MODEL, verbose_name='Resposnsible Party')),
                ('vendor', models.ForeignKey(blank=True, help_text='Enter the vendor for the Service Contract', on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_contract_vendor', to='entity.Company', verbose_name='Contract Vendor')),
            ],
            options={
                'verbose_name': 'Service Contract',
                'verbose_name_plural': 'Service Contracts',
            },
        ),
        migrations.AddField(
            model_name='service',
            name='service_contract',
            field=models.ForeignKey(blank=True, help_text='Select the Service Contract', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_service_contract', to='inventory.ServiceContract', verbose_name='Service Contract'),
        ),
        migrations.AddField(
            model_name='service',
            name='tested_by',
            field=models.ForeignKey(blank=True, help_text='Select who tested the device upon return', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tested_by', to=settings.AUTH_USER_MODEL, verbose_name='Tested By'),
        ),
        migrations.AddField(
            model_name='service',
            name='vendor',
            field=models.ForeignKey(blank=True, help_text='Select the Service Vendor', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serviced_by', to='entity.Company', verbose_name='Serviced By'),
        ),
        migrations.AddField(
            model_name='historicalservice',
            name='service_contract',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.ServiceContract'),
        ),
        migrations.AddField(
            model_name='historicalservice',
            name='tested_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalservice',
            name='vendor',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company'),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='service_contract',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.ServiceContract'),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='subcategory',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.DeviceSubcategory'),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='vendor',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company'),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='warranty_contact',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Person'),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='warranty_responsible',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldevice',
            name='warranty_vendor',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company'),
        ),
        migrations.AddField(
            model_name='device',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Select the Device Category', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_category', to='inventory.DeviceCategory', verbose_name='Device Category'),
        ),
        migrations.AddField(
            model_name='device',
            name='manager',
            field=models.ForeignKey(blank=True, help_text='Select the Device Manager', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_manager', to=settings.AUTH_USER_MODEL, verbose_name='Device Manager'),
        ),
        migrations.AddField(
            model_name='device',
            name='sales_rep',
            field=models.ForeignKey(blank=True, help_text='Select the Sales Representative', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sales_rep', to='entity.Person', verbose_name='Vendor Sales Rep'),
        ),
        migrations.AddField(
            model_name='device',
            name='service_contract',
            field=models.ForeignKey(blank=True, help_text='Select the Service Contract', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_service_contract', to='inventory.ServiceContract', verbose_name='Device Service Contract'),
        ),
        migrations.AddField(
            model_name='device',
            name='subcategory',
            field=models.ForeignKey(blank=True, help_text='Select the Device Subcategory', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_subcategory', to='inventory.DeviceSubcategory', verbose_name='Device Subcategory'),
        ),
        migrations.AddField(
            model_name='device',
            name='vendor',
            field=models.ForeignKey(blank=True, help_text='Select the Device Vendor', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='device_vendor', to='entity.Company', verbose_name='Device Vendor'),
        ),
        migrations.AddField(
            model_name='device',
            name='warranty_contact',
            field=models.ForeignKey(blank=True, help_text='Select the vendor contact for the Warranty', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='warranty_contact', to='entity.Person', verbose_name='Warranty Contact'),
        ),
        migrations.AddField(
            model_name='device',
            name='warranty_responsible',
            field=models.ForeignKey(blank=True, help_text='Select the staff resposnible for the Warranty', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='warranty_resposible', to=settings.AUTH_USER_MODEL, verbose_name='Warranty Responsible'),
        ),
        migrations.AddField(
            model_name='device',
            name='warranty_vendor',
            field=models.ForeignKey(blank=True, help_text='Select the vendor for the Warranty', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='warranty_vendor', to='entity.Company', verbose_name='Warranty Vendor'),
        ),
    ]
