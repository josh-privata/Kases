# Generated by Django 2.0.3 on 2018-12-23 01:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('line1', models.CharField(blank=True, help_text='Enter address line 1', max_length=120, null=True, verbose_name='Line 1')),
                ('line2', models.CharField(blank=True, help_text='Enter address line 2', max_length=120, null=True, verbose_name='Line 2')),
                ('line3', models.CharField(blank=True, help_text='Enter address line 3', max_length=120, null=True, verbose_name='Line 3')),
                ('city', models.CharField(blank=True, help_text='Enter the city', max_length=100, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, help_text='Enter the state', max_length=75, null=True, verbose_name='State')),
                ('country', models.CharField(blank=True, choices=[('GB', 'United Kingdom'), ('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, The Former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], help_text='Select the country', max_length=3, null=True, verbose_name='Country')),
                ('postcode', models.CharField(blank=True, help_text='Enter the postcode', max_length=20, null=True, verbose_name='Postcode')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Physical'), (2, 'Postal'), (3, 'Other')], help_text='Select the type of address', verbose_name='Line 3')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter the location', max_length=125, null=True, verbose_name='Location')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(blank=True, help_text='Enter a title for the company', max_length=125, null=True, verbose_name='Title')),
                ('code', models.CharField(blank=True, help_text='Enter the issuer code for the company', max_length=5, null=True, verbose_name='Issuer Code')),
                ('logo_upload', models.FileField(blank=True, help_text='Upload an logo for the company', null=True, upload_to='', verbose_name='Logo')),
                ('industry', models.PositiveIntegerField(blank=True, choices=[('100', 'ADVERTISING'), ('200', 'AGRICULTURE'), ('300', 'APPAREL & ACCESSORIES'), ('400', 'AUTOMOTIVE'), ('500', 'BANKING'), ('600', 'BIOTECHNOLOGY'), ('700', 'BUILDING MATERIALS & EQUIPMENT'), ('800', 'CHEMICAL'), ('900', 'COMPUTER'), ('1000', 'EDUCATION'), ('1100', 'ELECTRONICS'), ('1200', 'ENERGY'), ('1300', 'ENTERTAINMENT & LEISURE'), ('1400', 'FINANCE'), ('1500', 'FOOD & BEVERAGE'), ('1600', 'GROCERY'), ('1700', 'HEALTHCARE'), ('1800', 'INSURANCE'), ('1900', 'LEGAL'), ('2000', 'MANUFACTURING'), ('2100', 'PUBLISHING'), ('2200', 'REAL ESTATE'), ('2300', 'SERVICE'), ('2400', 'SOFTWARE'), ('2500', 'SPORTS'), ('2600', 'TECHNOLOGY'), ('2700', 'TELECOMMUNICATIONS'), ('2800', 'TELEVISION'), ('2900', 'TRANSPORTATION'), ('3000', 'VENTURE CAPITAL')], help_text='Select an industry for the company', null=True, verbose_name='Industry')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the slug', null=True, verbose_name='Title Slug')),
                ('address', models.ManyToManyField(help_text='Enter the address', related_name='company_address', to='entity.Address', verbose_name='Address')),
                ('authorisation', models.ForeignKey(blank=True, help_text='Select the authorisation level', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_authorisation', to='utils.Authorisation', verbose_name='Company Authorisation')),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='CompanyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Company Category',
                'verbose_name_plural': 'Company Categories',
            },
        ),
        migrations.CreateModel(
            name='CompanyClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Company Classification',
                'verbose_name_plural': 'Company Classifications',
            },
        ),
        migrations.CreateModel(
            name='CompanyStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Company Status',
                'verbose_name_plural': 'Company Status',
            },
        ),
        migrations.CreateModel(
            name='CompanyStatusGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('status', models.ManyToManyField(blank=True, help_text='Select Company Status', to='entity.CompanyStatus', verbose_name='Company Status')),
            ],
            options={
                'verbose_name': 'Company Status Group',
                'verbose_name_plural': 'Company Status Groups',
            },
        ),
        migrations.CreateModel(
            name='CompanyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Company Type',
                'verbose_name_plural': 'Company Types',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('email', models.EmailField(blank=True, default=None, help_text='Enter email', max_length=254, null=True, verbose_name='Email')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter location', max_length=125, null=True, verbose_name='Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(blank=True, help_text='Enter the job title', max_length=125, null=True, verbose_name='Job Title')),
                ('notes', models.CharField(blank=True, help_text='Enter notes', max_length=200, null=True, verbose_name='Notes')),
                ('date_start', models.DateTimeField(blank=True, help_text='Enter the start date', null=True, verbose_name='Date Started')),
                ('date_finish', models.DateTimeField(blank=True, help_text='Enter the finish date', null=True, verbose_name='Date Finished')),
                ('salary', models.PositiveIntegerField(blank=True, help_text='Enter the salary', null=True, verbose_name='Salary')),
                ('current', models.BooleanField(default=False, help_text='(Optional) Is Current', verbose_name='Current')),
                ('company', models.ForeignKey(blank=True, help_text='Select the company', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='person_company', to='entity.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Employment',
                'verbose_name_plural': 'Employment',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAddress',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('line1', models.CharField(blank=True, help_text='Enter address line 1', max_length=120, null=True, verbose_name='Line 1')),
                ('line2', models.CharField(blank=True, help_text='Enter address line 2', max_length=120, null=True, verbose_name='Line 2')),
                ('line3', models.CharField(blank=True, help_text='Enter address line 3', max_length=120, null=True, verbose_name='Line 3')),
                ('city', models.CharField(blank=True, help_text='Enter the city', max_length=100, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, help_text='Enter the state', max_length=75, null=True, verbose_name='State')),
                ('country', models.CharField(blank=True, choices=[('GB', 'United Kingdom'), ('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, The Former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], help_text='Select the country', max_length=3, null=True, verbose_name='Country')),
                ('postcode', models.CharField(blank=True, help_text='Enter the postcode', max_length=20, null=True, verbose_name='Postcode')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Physical'), (2, 'Postal'), (3, 'Other')], help_text='Select the type of address', verbose_name='Line 3')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter the location', max_length=125, null=True, verbose_name='Location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Address',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompany',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('title', models.CharField(blank=True, help_text='Enter a title for the company', max_length=125, null=True, verbose_name='Title')),
                ('code', models.CharField(blank=True, help_text='Enter the issuer code for the company', max_length=5, null=True, verbose_name='Issuer Code')),
                ('logo_upload', models.TextField(blank=True, help_text='Upload an logo for the company', max_length=100, null=True, verbose_name='Logo')),
                ('industry', models.PositiveIntegerField(blank=True, choices=[('100', 'ADVERTISING'), ('200', 'AGRICULTURE'), ('300', 'APPAREL & ACCESSORIES'), ('400', 'AUTOMOTIVE'), ('500', 'BANKING'), ('600', 'BIOTECHNOLOGY'), ('700', 'BUILDING MATERIALS & EQUIPMENT'), ('800', 'CHEMICAL'), ('900', 'COMPUTER'), ('1000', 'EDUCATION'), ('1100', 'ELECTRONICS'), ('1200', 'ENERGY'), ('1300', 'ENTERTAINMENT & LEISURE'), ('1400', 'FINANCE'), ('1500', 'FOOD & BEVERAGE'), ('1600', 'GROCERY'), ('1700', 'HEALTHCARE'), ('1800', 'INSURANCE'), ('1900', 'LEGAL'), ('2000', 'MANUFACTURING'), ('2100', 'PUBLISHING'), ('2200', 'REAL ESTATE'), ('2300', 'SERVICE'), ('2400', 'SOFTWARE'), ('2500', 'SPORTS'), ('2600', 'TECHNOLOGY'), ('2700', 'TELECOMMUNICATIONS'), ('2800', 'TELEVISION'), ('2900', 'TRANSPORTATION'), ('3000', 'VENTURE CAPITAL')], help_text='Select an industry for the company', null=True, verbose_name='Industry')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the slug', null=True, verbose_name='Title Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.CompanyCategory')),
                ('classification', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.CompanyClassification')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.CompanyStatus')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.CompanyType')),
            ],
            options={
                'verbose_name': 'historical company',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompanyCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Company Category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompanyClassification',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Company Classification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompanyStatus',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Company Status',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompanyStatusGroup',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Company Status Group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompanyType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Company Type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEmail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('email', models.EmailField(blank=True, default=None, help_text='Enter email', max_length=254, null=True, verbose_name='Email')),
                ('location', models.CharField(blank=True, default=None, help_text='Enter location', max_length=125, null=True, verbose_name='Location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical email',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEmployment',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('job_title', models.CharField(blank=True, help_text='Enter the job title', max_length=125, null=True, verbose_name='Job Title')),
                ('notes', models.CharField(blank=True, help_text='Enter notes', max_length=200, null=True, verbose_name='Notes')),
                ('date_start', models.DateTimeField(blank=True, help_text='Enter the start date', null=True, verbose_name='Date Started')),
                ('date_finish', models.DateTimeField(blank=True, help_text='Enter the finish date', null=True, verbose_name='Date Finished')),
                ('salary', models.PositiveIntegerField(blank=True, help_text='Enter the salary', null=True, verbose_name='Salary')),
                ('current', models.BooleanField(default=False, help_text='(Optional) Is Current', verbose_name='Current')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.Company')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Employment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPerson',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('prefix', models.PositiveIntegerField(blank=True, choices=[('1', 'Mr.'), ('2', 'Mrs.')], default='1', help_text='Select prefix', null=True, verbose_name='Prefix')),
                ('first_name', models.CharField(blank=True, help_text='Enter a first name', max_length=125, null=True, verbose_name='First Name')),
                ('middle_names', models.CharField(blank=True, help_text='Enter middle names', max_length=125, null=True, verbose_name='Middle Names')),
                ('last_name', models.CharField(blank=True, help_text='Enter a last name', max_length=125, null=True, verbose_name='Last Name')),
                ('suffix', models.CharField(blank=True, help_text='Enter a suffix', max_length=55, null=True, verbose_name='Suffix')),
                ('nickname', models.CharField(blank=True, help_text='Enter any nicknames', max_length=200, null=True, verbose_name='Nickname')),
                ('aliases', models.CharField(blank=True, help_text='Enter any known aliases', max_length=200, null=True, verbose_name='Aliases')),
                ('gender', models.PositiveIntegerField(blank=True, choices=[('1', 'Unknown'), ('2', 'Male'), ('3', 'Female')], help_text='Select the gender', null=True, verbose_name='Gender')),
                ('dob', models.DateTimeField(blank=True, help_text='Select the date of birth', null=True, verbose_name='Date Of Birth')),
                ('height', models.PositiveIntegerField(blank=True, help_text="Enter the person's height in centimeters", null=True, verbose_name='Height')),
                ('weight', models.PositiveIntegerField(blank=True, help_text="Enter the person's weight in kilograms", null=True, verbose_name='Weight')),
                ('age', models.PositiveIntegerField(blank=True, help_text="Enter the person's age", null=True, verbose_name='Age')),
                ('image_upload', models.TextField(blank=True, help_text='Upload an image for the Person', max_length=100, null=True, verbose_name='Image')),
                ('taxfile', models.CharField(blank=True, help_text='Enter the tax file number', max_length=35, null=True, verbose_name='Tax File Number')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the slug', null=True, verbose_name='Name Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('authorisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utils.Authorisation')),
            ],
            options={
                'verbose_name': 'historical Person',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPersonCategory',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person Category',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPersonClassification',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person Classification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPersonStatus',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person Status',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPersonStatusGroup',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person Status Group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPersonType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Person Type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSocial',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('service', models.CharField(blank=True, default=None, help_text='Enter the social media service name', max_length=125, null=True, verbose_name='Social Media Service')),
                ('alias', models.CharField(blank=True, default=None, help_text='Enter the alias', max_length=125, null=True, verbose_name='Social Media Alias')),
                ('url', models.URLField(help_text='Enter the profile URL', verbose_name='Profile URL')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical social',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTelephone',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('number', models.CharField(blank=True, help_text='Enter address line 1', max_length=40, null=True, verbose_name='Phone Number')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Home'), (2, 'Work'), (3, 'Mobile'), (4, 'Fax'), (5, 'Other')], help_text='Enter address line 1', verbose_name='Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical telephone',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWebsite',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('url', models.URLField(help_text='Enter the website URL', verbose_name='Website URL')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical website',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False, help_text='(Optional) Is Private', verbose_name='Private')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('prefix', models.PositiveIntegerField(blank=True, choices=[('1', 'Mr.'), ('2', 'Mrs.')], default='1', help_text='Select prefix', null=True, verbose_name='Prefix')),
                ('first_name', models.CharField(blank=True, help_text='Enter a first name', max_length=125, null=True, verbose_name='First Name')),
                ('middle_names', models.CharField(blank=True, help_text='Enter middle names', max_length=125, null=True, verbose_name='Middle Names')),
                ('last_name', models.CharField(blank=True, help_text='Enter a last name', max_length=125, null=True, verbose_name='Last Name')),
                ('suffix', models.CharField(blank=True, help_text='Enter a suffix', max_length=55, null=True, verbose_name='Suffix')),
                ('nickname', models.CharField(blank=True, help_text='Enter any nicknames', max_length=200, null=True, verbose_name='Nickname')),
                ('aliases', models.CharField(blank=True, help_text='Enter any known aliases', max_length=200, null=True, verbose_name='Aliases')),
                ('gender', models.PositiveIntegerField(blank=True, choices=[('1', 'Unknown'), ('2', 'Male'), ('3', 'Female')], help_text='Select the gender', null=True, verbose_name='Gender')),
                ('dob', models.DateTimeField(blank=True, help_text='Select the date of birth', null=True, verbose_name='Date Of Birth')),
                ('height', models.PositiveIntegerField(blank=True, help_text="Enter the person's height in centimeters", null=True, verbose_name='Height')),
                ('weight', models.PositiveIntegerField(blank=True, help_text="Enter the person's weight in kilograms", null=True, verbose_name='Weight')),
                ('age', models.PositiveIntegerField(blank=True, help_text="Enter the person's age", null=True, verbose_name='Age')),
                ('image_upload', models.FileField(blank=True, help_text='Upload an image for the Person', null=True, upload_to='', verbose_name='Image')),
                ('taxfile', models.CharField(blank=True, help_text='Enter the tax file number', max_length=35, null=True, verbose_name='Tax File Number')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Enter the slug', null=True, verbose_name='Name Slug')),
                ('address', models.ManyToManyField(help_text='Enter the address', related_name='person_address', to='entity.Address', verbose_name='Address')),
                ('authorisation', models.ForeignKey(blank=True, help_text='Select the authorisation level', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_authorisation', to='utils.Authorisation', verbose_name='Person Authorisation')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='PersonCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Person Category',
                'verbose_name_plural': 'Person Categories',
            },
        ),
        migrations.CreateModel(
            name='PersonClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Person Classification',
                'verbose_name_plural': 'Person Classifications',
            },
        ),
        migrations.CreateModel(
            name='PersonStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Person Status',
                'verbose_name_plural': 'Person Status',
            },
        ),
        migrations.CreateModel(
            name='PersonStatusGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
                ('status', models.ManyToManyField(blank=True, help_text='Select Person Status', to='entity.PersonStatus', verbose_name='Person Status')),
            ],
            options={
                'verbose_name': 'Person Status Group',
                'verbose_name_plural': 'Person Status Groups',
            },
        ),
        migrations.CreateModel(
            name='PersonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, help_text='Enter a title', max_length=50, verbose_name='Title')),
                ('colour', models.CharField(blank=True, default=None, help_text='(Optional) Enter a Hexidecimal colour representation', max_length=7, null=True, verbose_name='Colour')),
                ('description', models.CharField(blank=True, default=None, help_text='(Optional) Enter a description', max_length=250, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(editable=False, help_text='The creation date', verbose_name='Creation Date')),
                ('modified', models.DateTimeField(editable=False, help_text='The mdification date', null=True, verbose_name='Modification date')),
            ],
            options={
                'verbose_name': 'Person Type',
                'verbose_name_plural': 'Person Types',
            },
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('service', models.CharField(blank=True, default=None, help_text='Enter the social media service name', max_length=125, null=True, verbose_name='Social Media Service')),
                ('alias', models.CharField(blank=True, default=None, help_text='Enter the alias', max_length=125, null=True, verbose_name='Social Media Alias')),
                ('url', models.URLField(help_text='Enter the profile URL', verbose_name='Profile URL')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Telephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('number', models.CharField(blank=True, help_text='Enter address line 1', max_length=40, null=True, verbose_name='Phone Number')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Home'), (2, 'Work'), (3, 'Mobile'), (4, 'Fax'), (5, 'Other')], help_text='Enter address line 1', verbose_name='Type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, help_text='Is primary', verbose_name='Primary')),
                ('current', models.BooleanField(default=True, help_text='Is current', verbose_name='Current')),
                ('url', models.URLField(help_text='Enter the website URL', verbose_name='Website URL')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='person',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Select the category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_category', to='entity.PersonCategory', verbose_name='Person Category'),
        ),
        migrations.AddField(
            model_name='person',
            name='classification',
            field=models.ForeignKey(blank=True, help_text='Select the classification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_classification', to='entity.PersonClassification', verbose_name='Person Classification'),
        ),
        migrations.AddField(
            model_name='person',
            name='email',
            field=models.ManyToManyField(help_text='Enter the email address', related_name='person_email', to='entity.Email', verbose_name='Email'),
        ),
        migrations.AddField(
            model_name='person',
            name='employment',
            field=models.ManyToManyField(help_text='Enter employment', related_name='person_employment', to='entity.Employment', verbose_name='Employment'),
        ),
        migrations.AddField(
            model_name='person',
            name='social',
            field=models.ManyToManyField(help_text='Enter the social media service', related_name='person_social', to='entity.Social', verbose_name='Social'),
        ),
        migrations.AddField(
            model_name='person',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Select the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_status', to='entity.PersonStatus', verbose_name='Person Status'),
        ),
        migrations.AddField(
            model_name='person',
            name='telephone',
            field=models.ManyToManyField(help_text='Enter the telephone number', related_name='person_telephone', to='entity.Telephone', verbose_name='Telephone'),
        ),
        migrations.AddField(
            model_name='person',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Select the type', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_type', to='entity.PersonType', verbose_name='Person Type'),
        ),
        migrations.AddField(
            model_name='person',
            name='website',
            field=models.ManyToManyField(help_text='Enter the website', related_name='person_website', to='entity.Website', verbose_name='Website'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='category',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.PersonCategory'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='classification',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.PersonClassification'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='status',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.PersonStatus'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entity.PersonType'),
        ),
        migrations.AddField(
            model_name='company',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Select the category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_category', to='entity.CompanyCategory', verbose_name='Company Category'),
        ),
        migrations.AddField(
            model_name='company',
            name='classification',
            field=models.ForeignKey(blank=True, help_text='Select the classification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_classification', to='entity.CompanyClassification', verbose_name='Company Classification'),
        ),
        migrations.AddField(
            model_name='company',
            name='email',
            field=models.ManyToManyField(help_text='Enter the email address', related_name='company_email', to='entity.Email', verbose_name='Email'),
        ),
        migrations.AddField(
            model_name='company',
            name='social',
            field=models.ManyToManyField(help_text='Enter the social media service', related_name='company_social', to='entity.Social', verbose_name='Social'),
        ),
        migrations.AddField(
            model_name='company',
            name='status',
            field=models.ForeignKey(blank=True, help_text='Select the status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_status', to='entity.CompanyStatus', verbose_name='Company Status'),
        ),
        migrations.AddField(
            model_name='company',
            name='telephone',
            field=models.ManyToManyField(help_text='Enter the telephone number', related_name='company_telephone', to='entity.Telephone', verbose_name='Telephone'),
        ),
        migrations.AddField(
            model_name='company',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Select the type', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_type', to='entity.CompanyType', verbose_name='Company Type'),
        ),
        migrations.AddField(
            model_name='company',
            name='website',
            field=models.ManyToManyField(help_text='Enter the website', related_name='company_website', to='entity.Website', verbose_name='Website'),
        ),
    ]
